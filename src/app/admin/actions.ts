'use server'

import sql, { checkInCodeTable, checkInTabble , partyCodeTable} from "@/lib/db"
import { getRandom, makeid } from "@/utils"
import { PostgresError } from "postgres"


export type UploadFileType = 'CheckIn' | 'PartyCode'


interface DbRandomSelection {
    ct: number
    min_id: string
    max_id: string
    id_span: number
}

export interface PartyCodeData {
    id?: number
    code: string
    used_by?: string
    updated_at?: string
}
export interface CheckInData extends PartyCodeData{
    id?: number,
    table_nr: string
    seat_nr?: string
    name?: string
    check_in?: string
    inserted_at?: string
    update_at?: string
    history?: string
    check_in_code?: string
}

export interface GenerateCheckInCodeResponse {
    errorMessage?: string
    count?: number
}

export interface SqlCount {
    count: number
}

export interface CheckInCodeData {
    id?: number
    code: string
    inserted_at: string
    updated_at?: string
    used_by?: string
}


export interface CheckInCodeResponse {
    code?: CheckInCodeData
    errorMessage?: string
}

export async function create_party_code_table(){
    try{

        const tableName = '' + `${partyCodeTable}`

        const tableExist = await sql`
                SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE
                table_name  = ${tableName}
                );
        `

        if (tableExist[0]['exists']){
            const drop = await sql`
                DROP TABLE  ${sql(partyCodeTable)}
            `
            console.debug("drop", tableName)
        } 

        const createPartyCode = await sql`CREATE TABLE ${sql(partyCodeTable)} (
            code TEXT primary key NOT NULL
        )
        `
        console.debug("created: ", createPartyCode)

    } catch(error){
        console.error(error)
        throw error
    }
}


export async function create_checkin_table(){


    try {
        const tableName = '' + `${checkInTabble}`

        const tableExist = await sql`
                SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE
                table_name  = ${tableName}
                );
        `
        
        if (tableExist[0]['exists']){
            const drop = await sql`
                DROP TABLE  ${sql(checkInTabble)}
            `
            console.debug("drop", tableName)
        } 

        console.debug("create", checkInCodeTable)
        
        console.debug("created", checkInCodeTable)

        console.debug("create table", checkInTabble)
        // CREATE TABLE
        const createdCheckInTable = await sql`CREATE TABLE ${sql(checkInTabble)} (
            id bigint generated by default as identity primary key,
            code TEXT UNIQUE NOT NULL,
            table_nr TEXT NOT NULL,
            inserted_at TIMESTAMP with time zone default timezone('utc'::text, now()) NOT NULL,
            seat_nr TEXT,
            name TEXT,
            history TEXT,
            check_in_code TEXT,
            check_in TIMESTAMP with time zone default timezone('utc'::text, null),
            update_at TIMESTAMP with time zone default timezone('utc'::text, null)
        )
        `
        console.debug("created: ", createdCheckInTable)
    } catch (error){
        console.error(error)
        throw error
    }
}



async function insertCheckInData(checkInData: CheckInData[]){

    try {
        const insertCheckIn = await sql`
        INSERT INTO ${sql(checkInTabble)} ${sql(checkInData)}
        `
        return {"ok":200}
    } catch(error) {
        throw error;
    }
   
}

async function insertPartyCodeData(partyCodeData: PartyCodeData[]){

    const cleanData: PartyCodeData[] = partyCodeData.map(d => ({
        code: d.code
    })) 
    try {
       

        const insertPartyCode =  await sql`
        INSERT INTO ${sql(partyCodeTable)} ${sql(cleanData)}
        `
    
        return {"ok":200}
    } catch(error) {
        throw error;
    }
   
}


export async function handleUploadCheckIn(uploadData: CheckInData[],  password:string){
    console.debug('password', password)
    // console.log(data)

    const masterPassword = `${process.env.MASTER_PASSWORD}`

    if (password !== masterPassword){
        throw new Error("Password invalid")
    }

    await create_checkin_table()
    const insertResult = await insertCheckInData(uploadData)
    console.debug("insert", insertResult)
}


export async function handleUploadPartyCode(uploadData: PartyCodeData[],  password:string){
    console.debug('password', password)
    // console.log(data)

    const masterPassword = `${process.env.MASTER_PASSWORD}`

    if (password !== masterPassword){
        throw new Error("Password invalid")
    }

    await create_party_code_table()
    const insertResult = await insertPartyCodeData(uploadData)
    console.debug("insert", insertResult)
}


export async function getAllData(){
    const data = await sql<CheckInData[]>`SELECT * FROM ${sql(checkInTabble)}`

    return data
}


export async function isCheckInCodeExpired(code: string){

    code = code.toLocaleLowerCase()

    try{

        // TODO: fix this 30 Seconds
        const result = await sql`
            SELECT  exp_at, now(), EXTRACT(EPOCH  FROM (now() - exp_at)) AS expired_seconds
            FROM ${sql(checkInCodeTable)}
            LEFT JOIN
                (
                    SELECT id AS id2, inserted_at + INTERVAL '30 SECONDS' as exp_at
                    FROM ${sql(checkInCodeTable)}
                ) AS t2
            ON id = id2
            WHERE code = ${code}
        `

        if (result.length == 0){
            console.error("not found", code)
            return false
        }

        console.debug("expired", result)

        const expired_seconds = parseFloat(result[0]['expired_seconds'])
        console.debug('expired_seconds', expired_seconds)
        return expired_seconds > 0

    } catch (error) {
        console.error(error)
        return false
    }

}


export async function generateCheckInCode(){
    const checkInCodeResponse: CheckInCodeResponse = {}

    try {

        const tableName = '' + `${checkInCodeTable}`
        
        const tableExist = await sql`
                SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE
                table_name  = ${tableName}
                );
        `
        
        if (!tableExist[0]['exists']){
            console.debug("create", checkInCodeTable)
            await sql`CREATE TABLE ${sql(checkInCodeTable)} (
                id bigint generated by default as identity primary key,
                inserted_at TIMESTAMP with time zone default timezone('utc'::text, now()) NOT NULL,
                updated_at TIMESTAMP,
                code TEXT NOT NULL,
                used_by TEXT
            )`
            console.debug("created", checkInCodeTable)
        } 

        const code = makeid(4).toLocaleLowerCase()
        const inserted = await sql`
            INSERT INTO ${sql(checkInCodeTable)} 
            ("code")
            values
            (${code})
            `
        console.debug("insert", inserted)

        const result = await sql<CheckInCodeData[]>`
            SELECT *
            FROM ${sql(checkInCodeTable)}
            WHERE code = ${code}
        `
        
        checkInCodeResponse.code = result[0]
    } catch(error){

        console.error(error)
        checkInCodeResponse.errorMessage = "错误"
    }
    return checkInCodeResponse
}
